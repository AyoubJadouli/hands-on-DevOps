---
# tasks file for gitlab

# Copyright (C) 2019 Michael Joseph Walsh - All Rights Reserved
# You may use, distribute and modify this code under the
# terms of the the license.
#
# You should have received a copy of the license with
# this file. If not, please email <mjwalsh@nemonik.com>

- name: "ensure /home/{{ ansible_user_id }}/gitlab exists"
  file:
    path: "/home/{{ ansible_user_id }}/gitlab"
    state: directory
  tags:
    - gitlab

- name: "template files into /home/{{ ansible_user_id }}/gitlab"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    force: yes  
  with_items:
    - { src: "templates/README.MD.j2", dest: "/home/{{ ansible_user_id }}/gitlab/README.MD" }
    - { src: "templates/Dockerfile.j2", dest: "/home/{{ ansible_user_id }}/gitlab/Dockerfile" }
    - { src: "templates/dockerfile_build.sh.j2", dest: "/home/{{ ansible_user_id }}/gitlab/dockerfile_build.sh" }
    - { src: "templates/docker-compose.yml.j2", dest: "/home/{{ ansible_user_id }}/gitlab/docker-compose.yml" }
    - { src: "templates/gitlab.yml.j2", dest: "/home/{{ ansible_user_id }}/gitlab/gitlab.yml" }
  tags:
    - gitlab

- name: "make //home/{{ ansible_user_id }}/gitlab/dockerfile_build.sh executable"
  file: 
    path: "/home/{{ ansible_user_id }}/gitlab/dockerfile_build.sh"
    mode: "u=rwx,g=r,o=r"  
  tags:
    - gitlab

- name: "build nemonik/gitlab:{{ gitlab_version }} docker image"
  docker_image:
    path: "/home/{{ ansible_user_id }}/gitlab"
    name: nemonik/gitlab:{{ gitlab_version }}
    source: build    
    build:
      args:
        http_proxy: "{{ http_proxy|default('') }}"
        HTTP_PROXY: "{{ http_proxy|default('') }}"
        https_proxy: "{{ https_proxy|default('') }}"
        HTTPS_PROXY: "{{ https_proxy|default('') }}"
        NO_PROXY: "{{ no_proxy|default('') }}"
        no_proxy: "{{ no_proxy|default('') }}" 
  tags:
    - gitlab

- name: fail if gitlab_deploy_via is not set to either 'docker-compose' or 'kubectl'
  fail:
    msg: gitlab_deploy_via must be set to either 'kubectl' or 'docker-compose'.
  when: gitlab_deploy_via is undefined or ( gitlab_deploy_via != "docker-compose" and gitlab_deploy_via != "kubectl" )
  tags:
    - gitlab
  
- name: spin up GitLab via docker-compose
  docker_compose:
    build: no
    debug: yes
    project_src: "/home/{{ ansible_user_id }}/gitlab"
  when: gitlab_deploy_via == "docker-compose"
  tags:
    - gitlab

- name: spin up GitLab via Kubernetes
  shell: kubectl --kubeconfig=/home/{{ ansible_user_id }}/kubeconfig.yml apply -f gitlab.yml
  args:
    chdir: "/home/{{ ansible_user_id }}/gitlab"
  when: gitlab_deploy_via == "kubectl"
  tags:
    - gitlab

- name: wait for GitLab to come up
  uri:
    url: "http://{{ gitlab_host }}:{{ gitlab_port }}/favicon.ico"
    status_code: 200
  register: result
  until: result.status == 200
  retries: 60
  delay: 5
  tags:
    - gitlab

# See: https://docs.gitlab.com/ee/api/settings.html
- name: ensure allow local requests from hooks and services is enabled, auto devops is disabled and plantuml integration is configured
  block:
  - name: wait for GitLab to come up
    uri:
      url: "http://{{ gitlab_host }}:{{ gitlab_port }}/favicon.ico"
      status_code: 200
    register: result
    until: result.status == 200
    retries: 60
    delay: 5

  - name: get personal_access_token to GitLab
    shell: |
      body_header=$(curl -s -c cookies.txt -i "http://{{ gitlab_host }}:{{ gitlab_port }}/users/sign_in" -s)
      csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /new_user.*?authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
      curl -s -b cookies.txt -c cookies.txt -i "http://{{ gitlab_host }}:{{ gitlab_port }}/users/sign_in" --data "user[login]=root&user[password]={{ gitlab_root_password }}" --data-urlencode "authenticity_token=${csrf_token}" &>/dev/null
      body_header=$(curl -s -H 'user-agent: curl' -b cookies.txt -i "http://{{ gitlab_host }}:{{ gitlab_port }}/profile/personal_access_tokens" -s)
      csrf_token=$(echo $body_header | perl -ne 'print "$1\n" if /authenticity_token"[[:blank:]]value="(.+?)"/' | sed -n 1p)
      body_header=$(curl -s -L -b cookies.txt "http://{{ gitlab_host }}:{{ gitlab_port }}/profile/personal_access_tokens" --data-urlencode "authenticity_token=${csrf_token}" --data 'personal_access_token[name]=golab-generated&personal_access_token[expires_at]=&personal_access_token[scopes][]=api')
      echo $body_header | perl -ne 'print "$1\n" if /created-personal-access-token"[[:blank:]]value="(.+?)"/' | sed -n 1p
    args:
      executable: /bin/bash
    register: gitlab_personal_access_token_result

  - name: set the gitlab_personal_access_token
    set_fact: gitlab_personal_access_token={{ gitlab_personal_access_token_result.stdout }}

  - name: set GitLab applicaton settings
    uri:
      url: "http://{{ gitlab_host }}:{{ gitlab_port }}/api/v4/application/settings?allow_local_requests_from_hooks_and_services=true&auto_devops_enabled=false&plantuml_enabled=true&plantuml_url=http://{{ plantuml_host }}:{{ plantuml_port }}"
      method: PUT
      headers:
        PRIVATE-TOKEN: "{{ gitlab_personal_access_token }}"
  tags:
    - gitlab
